---
title: "Lab 1: Model Representation (04/09/2024)"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    code-fold: false
jupyter: python3
author: "Matthew Loh"
---

# Imports
```{python}
import numpy as np
import matplotlib.pyplot as plt
```

## Define Training Data
```{python}
# x_train is the input variable (size in 1000 square feet)
# y_train is the target (price in 1000s of dollars)
x_train = np.array([1.0, 2.0])
y_train = np.array([300.0, 500.0])
print(f"x_train: {x_train}")
print(f"y_train: {y_train}")
```

## Print Training Data Shape and Number of Examples
```{python}
print(f"x_train.shape: {x_train.shape}")
m = x_train.shape[0]
print(f"Number of training examples is {m}")

# m is the number of training examples
m = len(x_train)
print(f"Number of training examples is {m}")

i = 0  # Change this to 1 to see (x^1, y^1)
x_i = x_train[i]
y_i = y_train[i]
print(f"(x^({i}), y^({i})) = ({x_i}, {y_i})")
```

# Plot the Training Data Points
```{python}
#  Plot  the  data  points
plt.scatter(x_train, y_train, marker='x', c='r')
# Set the title
plt.title("Housing Prices")
# Set the y-axis label
plt.ylabel('Price (in 1000s of dollars)')
# Set the x-axis label
plt.xlabel('Size (1000 sqft)')
plt.show()
```

## Function to Compute Model Output
```{python}
def compute_model_output(x: np.ndarray, w: float, b: float) -> np.ndarray:
    """
    Computes the prediction of a linear model
    Args:
      x (np.ndarray (m,)): Data, m examples
      w,b (scalar) : Model parameters
    Returns:
      y (ndarray (m,)) : target values
    """
    m = x.shape[0]
    f_wb = np.zeros(m)
    for i in range(m):
        f_wb[i] = w * x[i] + b
    return f_wb
```

## Function to Plot Model Prediction for Convenience
```{python}
def plot_model_prediction(x_train, y_train, w, b):
    """
    Plots the model prediction along with the actual data points
    Args:
      x_train (np.ndarray): Input variable (size in 1000 square feet)
      y_train (np.ndarray): Target variable (price in 1000s of dollars)
      w (float): Model parameter
      b (float): Model parameter
    """
    # Compute the model prediction
    f_wb = compute_model_output(x_train, w, b)

    plt.plot(x_train, f_wb, label='Model Prediction')
    plt.scatter(x_train, y_train, marker='x', c='r', label="Actual Values")
    plt.title("Housing Prices")
    plt.ylabel('Price (in 1000s of dollars)')
    plt.xlabel('Size (1000 sqft)')
    plt.legend()
    plt.show()
```
# Control Run
```{python}
w = 100
b = 100
# Control
plot_model_prediction(x_train, y_train, w, b)
```

## Trial 1 - Increase w, maintain b
```{python}
w = 150
b = 100
plot_model_prediction(x_train, y_train, w, b)
```

## Trial 2 - Decrease w, maintain b
```{python}
w = 50
b = 100
plot_model_prediction(x_train, y_train, w, b)
```

## Trial 3 - Increase b, maintain w
```{python}
w = 100
b = 150
plot_model_prediction(x_train, y_train, w, b)
```

## Trial 4 - Optimum - Increase w by 98, increase b by 2.5
```{python}
w = 198
b = 102.5
plot_model_prediction(x_train, y_train, w, b)
```

# Cost of a 1200 sqft house
```{python}
w = 198
b = 102.5
x_i = 1.2
cost_1200sqft = w * x_i + b

print(f"Cost of a 1200 sqft house: ${cost_1200sqft}k")
```