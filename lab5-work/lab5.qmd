---
title: "Lab 5: MongoDB With Python"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
  html:
    code-fold: false
jupyter: python3
author: "Matthew Loh"
---

# Step-by-Step Exploratory Data Analysis (EDA) using Python

```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# to ignore warnings
import warnings
warnings.filterwarnings('ignore')
```

```{python}
data = pd.read_csv("used_cars.csv")
print(data.head())
print(data.tail())
print(data.info())
print(data.nunique())
print(data.isnull().sum())
print((data.isnull().sum()/(len(data)))*100)
```

```{python}
# Remove S.No. column from data
data = data.drop(['S.No.'], axis=1)
data.info()
```

```{python}
from datetime import date
date.today().year
data['Car_Age'] = date.today().year-data['Year']
data.head()

data['Brand'] = data.Name.str.split().str.get(0)
data['Model'] = data.Name.str.split().str.get(
    1) + data.Name.str.split().str.get(2)
data[['Name', 'Brand', 'Model']]
print(data.Brand.unique())
print(data.Brand.nunique())
searchfor = ['Isuzu', 'ISUZU', 'Mini', 'Land']
data[data.Brand.str.contains('|'.join(searchfor))].head(5)
data["Brand"].replace(
    {"ISUZU": "Isuzu", "Mini": "Mini Cooper", "Land": "Land Rover"}, inplace=True)
```

```{python}
data.describe().T
data.describe(include="all").T
```

```{python}
cat_cols = data.select_dtypes(include=['object']).columns
num_cols = data.select_dtypes(include=np.number).columns.tolist()
print("Categorical Variables:")
print(cat_cols)
print("Numerical Variables:")
print(num_cols)
```

```{python}
for col in num_cols:
    print(col)
    print('Skew :', round(data[col].skew(), 2))
    plt.figure(figsize=(15, 4))
    plt.subplot(1, 2, 1)
    data[col].hist(grid=False)
    plt.ylabel('count')
    plt.subplot(1, 2, 2)
    sns.boxplot(x=data[col])
plt.show() 
```

```{python}
fig, axes = plt.subplots(3, 2, figsize = (18, 18)) 
fig.suptitle('Bar plot for all categorical variables in the dataset') 
sns.countplot(ax = axes[0, 0], x = 'Fuel_Type', data = data, color = 
'blue',  
              order = data['Fuel_Type'].value_counts().index); 
sns.countplot(ax = axes[0, 1], x = 'Transmission', data = data, color = 
'blue',  
              order = data['Transmission'].value_counts().index); 
sns.countplot(ax = axes[1, 0], x = 'Owner_Type', data = data, color = 
'blue',  
              order = data['Owner_Type'].value_counts().index); 
sns.countplot(ax = axes[1, 1], x = 'Location', data = data, color = 'blue',  
              order = data['Location'].value_counts().index); 
sns.countplot(ax = axes[2, 0], x = 'Brand', data = data, color = 'blue',  
              order = data['Brand'].head(20).value_counts().index); 
sns.countplot(ax = axes[2, 1], x = 'Model', data = data, color = 'blue',  
              order = data['Model'].head(20).value_counts().index); 
axes[1][1].tick_params(labelrotation=45); 
axes[2][0].tick_params(labelrotation=90); 
axes[2][1].tick_params(labelrotation=90);
```

```{python}
# Function for log transformation of the column
def log_transform(data, col):
    for colname in col:
        if (data[colname] == 1.0).all():
            data[colname + '_log'] = np.log(data[colname]+1)
        else:
            data[colname + '_log'] = np.log(data[colname])
    data.info()


log_transform(data, ['Kilometers_Driven', 'Price'])
# Log transformation of the feature 'Kilometers_Driven'
sns.distplot(data["Kilometers_Driven_log"],
             axlabel="Kilometers_Driven_log")
plt.show()
sns.distplot(data["Price_log"], axlabel="Price_log")
plt.show()
```

```{python}
plt.figure(figsize=(13, 17))
sns.pairplot(data=data.drop(['Kilometers_Driven', 'Price'], axis=1))
plt.show()
```

```{python}
fig, axarr = plt.subplots(4, 2, figsize=(12, 18))
data.groupby('Location')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[0][0], fontsize=12)
axarr[0][0].set_title("Location Vs Price", fontsize=18)
data.groupby('Transmission')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[0][1], fontsize=12)
axarr[0][1].set_title("Transmission Vs Price", fontsize=18)
data.groupby('Fuel_Type')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[1][0], fontsize=12)
axarr[1][0].set_title("Fuel_Type Vs Price", fontsize=18)
data.groupby('Owner_Type')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[1][1], fontsize=12)
axarr[1][1].set_title("Owner_Type Vs Price", fontsize=18)
data.groupby('Brand')['Price_log'].mean().sort_values(
    ascending=False).head(10).plot.bar(ax=axarr[2][0], fontsize=12)
axarr[2][0].set_title("Brand Vs Price", fontsize=18)
data.groupby('Model')['Price_log'].mean().sort_values(
    ascending=False).head(10).plot.bar(ax=axarr[2][1], fontsize=12)
axarr[2][1].set_title("Model Vs Price", fontsize=18)
data.groupby('Seats')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[3][0], fontsize=12)
axarr[3][0].set_title("Seats Vs Price", fontsize=18)
data.groupby('Car_Age')['Price_log'].mean().sort_values(
    ascending=False).plot.bar(ax=axarr[3][1], fontsize=12)
axarr[3][1].set_title("Car_Age Vs Price", fontsize=18)
plt.subplots_adjust(hspace=1.0)
plt.subplots_adjust(wspace=.5)
sns.despine()
```

```{python}
# Sample data (replace with your actual data)
data['Car_Age'] = date.today().year - data['Year']
order = ['Year', 'Mileage', 'Engine', 'Power', 'Seats',
         'New_Price', 'Car_Age', 'Kilometers_Driven', 'Price']

# Ensure all relevant columns are numeric
columns_to_numeric = ['Year', 'Mileage', 'Engine', 'Power', 'Seats', 'New_Price',
                      'Car_Age', 'Kilometers_Driven', 'Price']

for col in columns_to_numeric:
    data[col] = pd.to_numeric(data[col], errors='coerce')

# Calculate the correlation matrix
correlation_matrix = data[columns_to_numeric].corr()

# Plot the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, fmt='.2f',
            vmin=-1, vmax=1, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()
```

```{python}
# Ensure all values in the 'Mileage' column are numeric
data['Mileage'] = pd.to_numeric(data['Mileage'], errors='coerce')

# Replace 0.0 with NaN
data.loc[data["Mileage"] == 0.0, 'Mileage'] = np.nan

# Calculate the mean of the 'Mileage' column, ignoring NaN values
mean_mileage = data['Mileage'].mean()

# Fill NaN values with the mean
data['Mileage'].fillna(value=mean_mileage, inplace=True)

# Verify that there are no NaN values left in the 'Mileage' column
data.Mileage.isnull().sum()
```