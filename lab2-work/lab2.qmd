---
title: "Lab 1: NumPy in Python"
format:
  html:
    code-fold: false
jupyter: python3
author: "Matthew Loh"
---


```{python}
import pandas as pd
from scipy.stats import pearsonr

df = pd.read_csv("./customer_data.csv")
df.dropna(inplace=True)
df = df[df['age'] > 18]

corr, p_value = pearsonr(df['age'], df['purchase_frequency'])
print("Correlation: ", corr)
print(f"P-value: {p_value}")

```

```{python}
import matplotlib.pyplot as plt
plt.scatter(df['age'], df['purchase_frequency'])
plt.xlabel("Age")
plt.ylabel('Purchase Frequency')
plt.show()
```

## Exercise 2.2 - Data statistics

```{python}
import numpy as np

# create a sample array of data
data = np.array([2, 4, 6, 8, 10])

# compute the mean of the data
mean = np.mean(data)

# compute the median of the data
median = np.median(data)

# compute the variance of the data
variance = np.var(data)

# compute the standard deviation of the data
stddev = np.std(data)

# compute the correlation between two arrays of data
x = np.array([1, 2, 3, 4, 5])
y = np.array([2, 4, 6, 8, 10])
correlation = np.corrcoef(x, y)[0, 1]

# perform a linear regression on two arrays of data
slope, intercept = np.polyfit(x, y, 1)
print("Mean:", mean)
print("Median:", median)
print("Variance:", variance)
print("Standard deviation:", stddev)
print("Correlation:", correlation)
print("Slope:", slope)
print("Intercept:", intercept)
```

```{python}
data = np.loadtxt('./populations.txt')
year, hares, lynxes, carrots = data.T

import matplotlib.pyplot as plt
plt.axes([0.2, 0.1, 0.5, 0.8])  
# <matplotlib.axes...Axes object at ...> 
plt.plot(year, hares, year, lynxes, year, carrots)  
# [<matplotlib.lines.Line2D object at ...>, ...] 
plt.legend(('Hare', 'Lynx', 'Carrot'), loc=(1.05, 0.5))  
# <matplotlib.legend.Legend object at ...> 
plt.show()
```

Computes and print, based on the data in populations.txt... 
1.  The mean and std of the populations of each species for the years in the period. 
2.  Which year each species had the largest population.  (Hint: argmax) 
3.  Which  species  has  the  largest  population  for  each  year.  (Hint: argsort &  fancy  indexing 
of np.array(['H', 'L', 'C'])) 
4.  Which years any of the populations is above 50000. (Hint: comparisons and np.any) 
5.  The top 2 years for each species when they had the lowest populations. (Hint: argsort, fancy 
indexing) 
6.  Compare (plot) the change in hare population (see help(np.gradient)) and the number of lynxes. 
Check correlation (see help(np.corrcoef)). 
... all without for-loops.

```{python}
import numpy as np
import matplotlib.pyplot as plt
# 1
data = np.loadtxt("./populations.txt")
year, hares, lynxes, carrots = data.T
# Mean and std of "Hare"
print(f"Mean of Hares: {np.mean(hares)}")
print(f"Standard deviation of Hares: {np.std(hares)}")
# Mean and std of "Lynxes"
print(f"Mean of Lynxes: {np.mean(lynxes)}")
print(f"Standard deviation of Lynxes: {np.std(lynxes)}")
# Mean and std of "Carrots"
print(f"Mean of Carrots: {np.mean(carrots)}")
print(f"Standard deviation of Carrots: {np.std(carrots)}")
# Which year each species had the largest population
print(f"Year of largest population: {year[np.argmax(hares)]} for Hares")
print(f"Year of largest population: {year[np.argmax(lynxes)]} for Lynxes")
print(f"Year of largest population: {year[np.argmax(carrots)]} for Carrots")
# Which species has the largest population for each year
# Hint: argsort & fancy indexing of np.array(['H', 'L', 'C'])
# print(f"{data[:]}")  # Prints the rows of arrays (2-D)
# # Selects columns starting from index 1, [year, pop_1,pop_2,pop_3] -> [[pop_1, pop_2, pop_3]]
# print(f"{data[:, 1:]}")
# print(f"{data[:, 0:]}")  # Will print the years + species pop
# print(f"{data[:, 1:]}")  # Will print population of species only
# For a 2-D array returns the indices of max value along the second axis, the columns, as an array.
# print(f"{np.argmax(data[:, 1:], axis=1)}")
print(f"Species with largest population for each year: {
      np.array(['H', 'L', 'C'])[np.argmax(data[:, 1:], axis=1)]}"
      )
species = ["hare", "lynx", "carrot"]
zip(year, np.take(species, np.argmax(data[:, 1:], axis=1)))
# Print out a zip object
print(list(zip(year, np.take(species, np.argmax(data[:, 1:], axis=1)))))
# Which years any of the populations is above 50000
# Hint: comparisons and np.any
print(f"Years with populations above 50000: {
      year[np.any(data[:, 1:] > 50000, axis=1)]}")

# The top 2 years for each species when they had the lowest populations
# Hint: argsort, fancy indexing
print(f"Top 2 years with lowest populations: {
      year[np.argsort(data[:, 1:], axis=1)[:2]]}")
# Compare (plot) the change in hare population (see help(np.gradient)) and the number of lynxes
# Check correlation (see help(np.corrcoef))
plt.plot(year, lynxes, 'r-', year, np.gradient(hares), 'b--')
plt.legend(['lynx', 'grad(hare)'], loc='best')
print(np.corrcoef(lynxes, np.gradient(hares)))
plt.show()

plt.plot(year, lynxes, label="Lynxes")
plt.plot(year, np.gradient(hares), label="Hares")
plt.legend()
plt.show()
print(np.corrcoef(lynxes, np.gradient(hares)))
```

## Exercise 2.3 - Polynomials

```{python}
import numpy as np
p = np.poly1d([3, 2, -1])
p(0)
p.roots
p.order
```

```{python}
import numpy as np
import matplotlib.pyplot as plt

# set the random seed for reproducibility
np.random.seed(12)

# generate some noisy data
x = np.linspace(0, 1, 20)
y = np.cos(x) + 0.3*np.random.rand(20)

# fit a polynomial of degree 3 to the data
p = np.poly1d(np.polyfit(x, y, 3))

# generate a set of evenly-spaced points for the plot
t = np.linspace(0, 1, 200)

# plot the data and the fitted polynomial
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()
```

## More Polynomials
```{python}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

from sklearn import linear_model

# Create color maps for 3-class classification problem, as with iris
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])

# create a random number generator with a fixed seed
rng = np.random.RandomState(0)

# generate 100 random numbers between -1 and 1
x = 2*rng.rand(100) - 1

# define a polynomial function


def f(t): return 1.2 * t**2 + .1 * t**3 - .4 * t ** 5 - .5 * t ** 9


# evaluate the function on the random input data and add noise
y = f(x) + .4 * rng.normal(size=100)

# create a set of evenly-spaced test points for the function
x_test = np.linspace(-1, 1, 100)
# plot The data
plt.figure(figsize=(6, 4))
plt.scatter(x, y, s=4)
# create a design matrix with powers of x up to degree 4
X = np.array([x**i for i in range(5)]).T
# create a design matrix for the test points up to deg
X_test = np.array([x_test**i for i in range(5)]).T

# fit a linear regression moddel to the data with degree
regr = linear_model.LinearRegression()
regr.fit(X, y)

# plot the predicted curve for the test points using the trained model
plt.plot(x_test, regr.predict(X_test), label='4th order')

# repeat for degree 9 polynomial features
X = np.array([x**i for i in range(10)]).T
X_test = np.array([x_test**i for i in range(10)]).T
regr = linear_model.LinearRegression()
regr.fit(X, y)
plt.plot(x_test, regr.predict(X_test), label='9th order')
plt.legend(loc='best')
plt.axis('tight')
# Ground truth
plt.figure(figsize=(6, 4))  # create a new figure with
plt.scatter(x, y, s=4)
plt.plot(x_test, f(x_test), label="truth")
plt.title('Ground truth (9th order polynomial)')
plt.show()
```